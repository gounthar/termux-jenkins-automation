---
# Jenkins Configuration as Code (JCasC)
# Generated by Ansible - Based on template

jenkins:
  systemMessage: "Jenkins on Android - CloudNord Demo\nManaged by Configuration as Code"
  numExecutors: 0  # Controller doesn't run builds directly

  globalNodeProperties:
    - envVars:
        env:
          - key: CASC_RELOAD_TOKEN
            value: "{{ jcasc_reload_token }}"

  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "{{ jenkins_admin_user }}"
          password: "{{ jenkins_admin_password }}"

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false

  nodes:
    - permanent:
        name: "{{ agent_name }}"
        labelString: "{{ agent_labels }}"
        launcher:
          ssh:
            credentialsId: "termux-ssh-key"
            host: "localhost"  # Agent on same device
            port: {{ ssh_port }}
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false
        nodeDescription: "Termux SSH Agent on Android"
        remoteFS: "{{ agent_home }}"
        retentionStrategy: "always"
        numExecutors: {{ jenkins_agent_executors | default(2) }}

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              id: "termux-ssh-key"
              description: "SSH key for Termux agent"
              privateKeySource:
                directEntry:
                  privateKey: ${readFile:{{ agent_ssh_key }}}
              scope: SYSTEM
              username: "{{ jenkins_agent_user }}"

unclassified:
  location:
    url: "http://{{ ansible_host }}:{{ jenkins_port }}/"

tool:
  git:
    installations:
      - name: "Default"
        home: "{{ termux_usr }}/bin/git"

  jdk:
    installations:
      - name: "{{ jdk_tool_name }}"
        home: "{{ termux_usr }}/opt/openjdk"

# NOTE: Jobs are NOT managed via JCasC
# Jobs should be created manually via Jenkins UI or CLI, then backed up using:
#   ansible-playbook ansible/playbooks/backup-jenkins.yaml
# To restore jobs on a new instance, extract job configs from backup tarball
